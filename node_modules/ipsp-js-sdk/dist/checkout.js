(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.$checkout = factory());
})(this, (function () { 'use strict';

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var checkout$1 = {exports: {}};

	var component = {};

	/**
	 * Modules registry
	 * @type {Object<string,any>}
	 */
	var modules = {};
	/**
	 * @type {Object<string,any>}
	 */
	var instance = {};
	/**
	 * @param {string} name
	 * @param {Object} [params]
	 * @returns {{}}
	 */
	var newModule = function newModule(name, params) {
	  if (!modules[name]) {
	    throw Error(['module is undefined', name].join(' '));
	  }
	  return new modules[name](params || {});
	};
	var addModule = function addModule(name, module) {
	  if (modules[name]) {
	    throw Error(['module already added', name].join(' '));
	  }
	  modules[name] = module;
	};
	function Component(name, params) {
	  if (instance[name]) return instance[name];
	  return instance[name] = newModule(name, params);
	}
	Component.get = function (name, params) {
	  return newModule(name, params);
	};
	Component.add = function (name, module) {
	  addModule(name, module);
	  return this;
	};
	component.Component = Component;

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}

	var utils = {};

	var digitTest = /^\d+$/;
	var keyBreaker = /([^\[\]]+)|(\[\])/g;
	var paramTest = /([^?#]*)(#.*)?$/;
	var r20 = /%20/g;
	var rbracket = /\[\]$/;
	var matchSymbol = /\s([a-zA-Z]+)/;
	var prep = function prep(str) {
	  return decodeURIComponent(str.replace(/\+/g, ' '));
	};
	var flatten = function flatten(array) {
	  var result = [];
	  forEach$2(array, function (item) {
	    result = result.concat(isArray(item) ? flatten(item) : item);
	  });
	  return result;
	};
	var recursiveParams = function recursiveParams(prefix, obj, next) {
	  if (isArray(obj)) {
	    forEach$2(obj, function (item, prop) {
	      if (rbracket.test(prefix)) {
	        next(prefix, item);
	      } else {
	        recursiveParams(prefix + "[" + (isPlainObject(obj) ? prop : "") + "]", item, next);
	      }
	    });
	  } else if (isPlainObject(obj)) {
	    forEach$2(obj, function (item, prop) {
	      recursiveParams(prefix + "[" + prop + "]", item, next);
	    });
	  } else {
	    next(prefix, obj);
	  }
	};
	var getType = utils.getType = function (o) {
	  return {}.toString.call(o).match(matchSymbol)[1].toLowerCase();
	};
	var isPlainObject = utils.isPlainObject = function (o) {
	  return !!o && _typeof(o) === 'object' && o.constructor === Object;
	};
	var isFunction$2 = utils.isFunction = function (o) {
	  return getType(o) === 'function';
	};
	var isArray = utils.isArray = function (o) {
	  return getType(o) === 'array';
	};
	var isElement = utils.isElement = function (o) {
	  return o && o.nodeType === 1;
	};
	var toArray = utils.toArray = function (o) {
	  return [].slice.call(o);
	};
	var hasProp$1 = utils.hasProp = function (o, v) {
	  return o && o.hasOwnProperty(v);
	};
	var forEach$2 = utils.forEach = function (ob, cb, cx) {
	  for (var p in ob) if (hasProp$1(ob, p)) cb.call(cx || null, ob[p], p);
	};
	var cleanObject = utils.cleanObject = function (ob) {
	  for (var p in ob) {
	    if (hasProp$1(ob, p)) {
	      if (ob[p].length === 0) {
	        if (isArray(ob)) ob.splice(p, 1);
	        if (isPlainObject(ob)) delete ob[p];
	      } else if (isPlainObject(ob[p])) {
	        cleanObject(ob[p]);
	      }
	    }
	  }
	  return ob;
	};
	var extend = utils.extend = function (obj) {
	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }
	  forEach$2(args, function (o) {
	    if (o !== null) {
	      forEach$2(o, function (value, key) {
	        if (isPlainObject(value)) {
	          obj[key] = extend(obj[key] || {}, value);
	        } else {
	          obj[key] = value;
	        }
	      });
	    }
	  });
	  return obj;
	};
	var uuid = utils.uuid = function () {
	  var a = 0,
	    b = '';
	  while (a++ < 36) {
	    if (a * 51 & 52) {
	      b += (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16);
	    } else {
	      b += '-';
	    }
	  }
	  return b;
	};
	utils.isObject = function (o) {
	  return getType(o) === 'object';
	};
	utils.isRegexp = function (o) {
	  return getType(o) === 'regexp';
	};
	utils.isArguments = function (o) {
	  return getType(o) === 'arguments';
	};
	utils.isError = function (o) {
	  return getType(o) === 'error';
	};
	utils.isDate = function (o) {
	  return getType(o) === 'date';
	};
	utils.isString = function (o) {
	  return getType(o) === 'string';
	};
	utils.isNumber = function (o) {
	  return getType(o) === 'number';
	};
	utils.map = function (ob, cb, cx) {
	  var p,
	    t,
	    r = [];
	  for (p in ob) if (hasProp$1(ob, p)) if ((t = cb.call(cx || null, ob[p], p)) !== undefined) r[p] = t;
	  return r;
	};
	utils.querySelectorAll = function (o, p) {
	  return toArray((p || document).querySelectorAll(o));
	};
	utils.querySelector = function (o, p) {
	  return (p || document).querySelector(o);
	};
	utils.deparam = function (params) {
	  var data = {};
	  if (params.charAt(0) === '?') params = params.slice(1);
	  if (params && paramTest.test(params)) {
	    forEach$2(params.split('&'), function (pair) {
	      var parts = pair.split('='),
	        key = prep(parts.shift()),
	        value = prep(parts.join('=')),
	        current = data;
	      if (key) {
	        parts = key.match(keyBreaker);
	        for (var j = 0, l = parts.length - 1; j < l; j++) {
	          if (!current[parts[j]]) {
	            current[parts[j]] = digitTest.test(parts[j + 1]) || parts[j + 1] === '[]' ? [] : {};
	          }
	          current = current[parts[j]];
	        }
	        var lastPart = parts.pop();
	        if (lastPart === '[]') {
	          current.push(value);
	        } else {
	          current[lastPart] = value;
	        }
	      }
	    });
	  }
	  return data;
	};
	utils.param = function (obj) {
	  var result = [];
	  forEach$2(obj, function (item, prop) {
	    recursiveParams(prop, item, function (key, value) {
	      value = value == null ? "" : value;
	      result.push([encodeURIComponent(key), encodeURIComponent(value)].join('='));
	    });
	  });
	  return result.join("&").replace(r20, '+');
	};
	utils.removeElement = function (el) {
	  el.parentNode.removeChild(el);
	};
	utils.createElement = function (tag) {
	  return document.createElement(tag);
	};
	utils.addClass = function () {
	  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }
	  var el = args.shift();
	  if (isElement(el) === false) return;
	  var classList = el.className.trim().split(/\s+/);
	  var tokens = flatten(args.map(function (item) {
	    return item.trim().split(/\s+/);
	  }));
	  tokens.forEach(function (token) {
	    if (token && !~classList.indexOf(token)) {
	      classList.push(token);
	    }
	  });
	  el.className = classList.join(' ').trim();
	};
	utils.removeClass = function () {
	  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }
	  var el = args.shift();
	  if (isElement(el) === false) return;
	  var classList = el.className.trim().split(/\s+/);
	  var tokens = flatten(args.map(function (item) {
	    return item.trim().split(/\s+/);
	  }));
	  tokens.forEach(function (token) {
	    if (token) {
	      var index = classList.indexOf(token);
	      if (!!~index) {
	        classList.splice(index, 1);
	      }
	    }
	  });
	  el.className = classList.join(' ').trim();
	};
	utils.removeAttr = function (el, attrs) {
	  if (isElement(el) === false) return false;
	  if (isPlainObject(attrs)) {
	    forEach$2(attrs, function (value) {
	      el.removeAttribute(value);
	    });
	  }
	};
	utils.addAttr = function (el, attrs) {
	  if (isElement(el) === false) return false;
	  if (isPlainObject(attrs)) {
	    forEach$2(attrs, function (value, name) {
	      el.setAttribute(name, value);
	    });
	  }
	};
	utils.getStyle = function (el, prop, getComputedStyle) {
	  getComputedStyle = window.getComputedStyle;
	  return (getComputedStyle ? getComputedStyle(el) : el['currentStyle'])[prop.replace(/-(\w)/gi, function (word, letter) {
	    return letter.toUpperCase();
	  })];
	};
	utils.getPath = function (path) {
	  var props = path.split('.');
	  var first = props.shift();
	  var value = null;
	  if (hasProp$1(window, first)) {
	    value = window[first];
	    forEach$2(props, function (name) {
	      value = hasProp$1(value, name) ? value[name] : null;
	    });
	  }
	  return value;
	};
	utils.stringFormat = function (format, params, expr) {
	  return (format || '').replace(expr || /{(.+?)}/g, function (match, prop) {
	    return params[prop] || match;
	  });
	};
	utils.cssUnit = function (value, unit) {
	  return String(value || 0).concat(unit || '').concat(' !important');
	};
	/**
	 * @function
	 * @type {function(*, *, *)}
	 */
	utils.getPaymentRequest = function (cx) {
	  var NativePaymentRequest;
	  if (hasProp$1(cx, 'PaymentRequest') && isFunction$2(cx.PaymentRequest)) {
	    NativePaymentRequest = cx.PaymentRequest;
	  }
	  return function (methods, details, options) {
	    var request = null;
	    details = details || {};
	    details.id = uuid();
	    options = options || {};
	    if (NativePaymentRequest) {
	      try {
	        request = new NativePaymentRequest(methods, details, options);
	      } catch (e) {
	        request = null;
	      }
	    }
	    return request;
	  };
	}(window);
	utils.jsonParse = function (value, defaults) {
	  try {
	    return JSON.parse(value);
	  } catch (e) {
	    return defaults;
	  }
	};

	var config = {};

	config.GooglePayApi = 'https://pay.google.com/gp/p/js/pay.js';
	config.GoogleBaseRequest = {
	  apiVersion: 2,
	  apiVersionMinor: 0,
	  allowedPaymentMethods: [{
	    type: 'CARD',
	    parameters: {
	      allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],
	      allowedCardNetworks: ['AMEX', 'DISCOVER', 'INTERAC', 'JCB', 'MASTERCARD', 'VISA']
	    }
	  }]
	};
	config.GooglePayLanguages = ['ar', 'bg', 'ca', 'zh', 'hr', 'cs', 'da', 'nl', 'en', 'et', 'fi', 'fr', 'de', 'el', 'id', 'it', 'ja', 'ko', 'ms', 'no', 'pl', 'pt', 'ru', 'sr', 'sk', 'sl', 'es', 'sv', 'th', 'tr', 'uk'];
	config.PaymentRequestOptions = {};
	config.PaymentRequestDetails = {
	  total: {
	    label: 'Total',
	    amount: {
	      currency: 'USD',
	      value: '0.00'
	    }
	  }
	};
	config.ApiFrameCss = {
	  width: '1px !important',
	  height: '1px !important',
	  left: '1px !important',
	  bottom: '1px !important',
	  position: 'fixed !important',
	  border: '0px !important'
	};
	config.ButtonFrameCss = {
	  border: 'none !important',
	  margin: '0 !important',
	  padding: '0 !important',
	  display: 'block !important',
	  width: '1px !important',
	  'min-width': '100% !important',
	  background: 'transparent !important',
	  position: 'relative !important',
	  opacity: '0 !important',
	  overflow: 'hidden !important',
	  height: '100% !important',
	  outline: 'none !important',
	  'z-index': '1 !important'
	};
	config.ButtonFrameAttrs = {
	  tabindex: '-1',
	  scrolling: 'no',
	  frameborder: 0,
	  allowtransparency: true,
	  allowpaymentrequest: true
	};
	config.ButtonCoverCss = {
	  'z-index': '2 !important',
	  position: 'absolute !important',
	  border: 'none !important',
	  background: 'transparent !important',
	  left: '0 !important',
	  top: '0 !important',
	  cursor: 'pointer !important',
	  outline: 'none !important',
	  width: '100% !important',
	  height: '100% !important'
	};
	config.ButtonCoverAttrs = {
	  role: 'button',
	  'aria-pressed': 'false'
	};
	config.ButtonContainerCss = {
	  border: '0 !important',
	  margin: '0 !important',
	  padding: '0 !important',
	  display: 'block !important',
	  background: 'transparent !important',
	  'user-select': 'none !important',
	  overflow: 'hidden !important',
	  position: 'relative !important',
	  opacity: '1 !important',
	  height: '0 !important',
	  width: '100% !important',
	  outline: 'none !important'
	};
	config.ButtonDefaultColor = 'dark';
	config.ButtonColorMap = {
	  dark: 'dark',
	  light: 'light',
	  black: 'dark',
	  white: 'light'
	};
	config.ButtonLabelMap = {
	  ar: '',
	  bg: '',
	  ca: '',
	  zh: '',
	  hr: '',
	  cs: '',
	  da: '',
	  nl: '',
	  en: 'Pay with',
	  et: '',
	  es: 'Comprar con',
	  el: '',
	  fi: '',
	  fr: 'Acheter avec',
	  de: 'Zahlen über',
	  id: '',
	  it: 'Acquista con',
	  ja: '',
	  ko: '',
	  ms: '',
	  no: '',
	  pl: 'Zapłać przez',
	  pt: '',
	  ru: 'Оплатить через',
	  sr: '',
	  sk: 'Zaplatiť cez',
	  sl: '',
	  sv: '',
	  th: '',
	  tr: '',
	  uk: 'Оплатити через'
	};

	var api = {};

	var deferred = {};

	utils.isArray;
	  var isFunction$1 = utils.isFunction;
	  utils.hasProp;
	  var forEach$1 = utils.forEach;
	var PENDING = 0;
	var RESOLVED = 1;
	var REJECTED = 2;
	/**
	 * @name Deferred
	 * @param [fn]
	 * @return {Deferred}
	 */
	deferred.Deferred = function Deferred(fn) {
	  var doneFuncs = [];
	  var failFuncs = [];
	  var progressFuncs = [];
	  var status = PENDING;
	  var resultArgs = null;
	  /**
	   * @lends Deferred.prototype
	   */
	  var _promise = {
	    done: function done(fn) {
	      if (status === RESOLVED) {
	        fn.apply(this, resultArgs);
	      }
	      doneFuncs.push(fn);
	      return this;
	    },
	    fail: function fail(fn) {
	      if (status === RESOLVED) {
	        fn.apply(this, resultArgs);
	      }
	      failFuncs.push(fn);
	      return this;
	    },
	    always: function always(fn) {
	      return this.done(fn).fail(fn);
	    },
	    progress: function progress(fn) {
	      if (status === PENDING) {
	        progressFuncs.push(fn);
	      }
	      return this;
	    },
	    then: function then(done, fail, progress) {
	      if (done) {
	        this.done(done);
	      }
	      if (fail) {
	        this.fail(fail);
	      }
	      if (progress) {
	        this.progress(progress);
	      }
	      return this;
	    },
	    promise: function promise(object) {
	      if (object === null) {
	        return _promise;
	      }
	      forEach$1(_promise, function (value, name) {
	        object[name] = value;
	      });
	      return object;
	    },
	    state: function state() {
	      return status;
	    },
	    isPending: function isPending() {
	      return status === PENDING;
	    },
	    isRejected: function isRejected() {
	      return status === REJECTED;
	    },
	    isResolved: function isResolved() {
	      return status === RESOLVED;
	    }
	  };
	  /**
	   * @lends Deferred.prototype
	   */
	  var deferred = {
	    resolveWith: function resolveWith(context, params) {
	      if (status === PENDING) {
	        status = RESOLVED;
	        var args = resultArgs = params || [];
	        for (var i = 0; i < doneFuncs.length; i++) {
	          doneFuncs[i].apply(context, args);
	        }
	      }
	      return this;
	    },
	    rejectWith: function rejectWith(context, params) {
	      if (status === PENDING) {
	        status = REJECTED;
	        var args = resultArgs = params || [];
	        for (var i = 0; i < failFuncs.length; i++) {
	          failFuncs[i].apply(context, args);
	        }
	      }
	      return this;
	    },
	    notifyWith: function notifyWith(context, params) {
	      if (status === PENDING) {
	        var args = resultArgs = params || [];
	        for (var i = 0; i < progressFuncs.length; i++) {
	          progressFuncs[i].apply(context, args);
	        }
	      }
	      return this;
	    },
	    resetState: function resetState() {
	      status = PENDING;
	      return this;
	    },
	    resolve: function resolve() {
	      return this.resolveWith(this, arguments);
	    },
	    reject: function reject() {
	      return this.rejectWith(this, arguments);
	    },
	    notify: function notify() {
	      return this.notifyWith(this, arguments);
	    }
	  };
	  var obj = _promise.promise(deferred);
	  if (isFunction$1(fn)) {
	    fn.call(obj, obj);
	  }
	  return obj;
	};

	var module = {};

	var _class = {};

	var init = false;
	var fnTest = /xyz/.test(function () {
	  return 'xyz';
	}.toString()) ? /\b_super\b/ : /.*/;
	function ClassObject$3() {}
	ClassObject$3.prototype._super = function () {};
	ClassObject$3.prototype.instance = function (params) {
	  return new this.constructor(params);
	};
	ClassObject$3.prototype.proxy = function (fn) {
	  fn = typeof fn == 'string' ? this[fn] : fn;
	  return function (cx, cb) {
	    return function () {
	      return cb.apply(cx, [this].concat(Array.prototype.slice.call(arguments)));
	    };
	  }(this, fn);
	};
	function superMethod(parent, name, method) {
	  return function () {
	    var temp = this._super,
	      result;
	    this._super = parent[name];
	    result = method.apply(this, arguments);
	    this._super = temp;
	    return result;
	  };
	}
	function assign(target, instance) {
	  var prop,
	    proto,
	    parent = target.prototype;
	  init = true;
	  proto = new target();
	  init = false;
	  for (prop in instance) {
	    if (instance.hasOwnProperty(prop)) {
	      if (typeof parent[prop] == 'function' && typeof instance[prop] == 'function' && fnTest.test(instance[prop])) {
	        proto[prop] = superMethod(parent, prop, instance[prop]);
	      } else {
	        proto[prop] = instance[prop];
	      }
	    }
	  }
	  return proto;
	}
	ClassObject$3.extend = function extend(instance) {
	  function Class() {
	    if (!init && this) this['init'].apply(this, arguments);
	  }
	  Class.prototype = assign(this, instance);
	  Class.prototype.constructor = Class;
	  Class.extend = extend;
	  return Class;
	};
	_class.ClassObject = ClassObject$3;

	var event = {};

	var ClassObject$2 = _class.ClassObject;
	event.Event = ClassObject$2.extend({
	  init: function init() {
	    this.events = {};
	    this.empty = [];
	  },
	  on: function on(type, callback) {
	    (this.events[type] = this.events[type] || []).push(callback);
	    return this;
	  },
	  off: function off(type, callback) {
	    type || (this.events = {});
	    var list = this.events[type] || this.empty,
	      i = list.length = callback ? list.length : 0;
	    while (i--) callback === list[i] && list.splice(i, 1);
	    return this;
	  },
	  trigger: function trigger(type) {
	    var e = this.events[type] || this.empty,
	      list = e.length > 0 ? e.slice(0, e.length) : e,
	      i = 0,
	      j;
	    while (j = list[i++]) j.apply(j, this.empty.slice.call(arguments, 1));
	    return this;
	  }
	});

	var ClassObject$1 = _class.ClassObject;
	var Event = event.Event;
	var Utils = utils;
	module.Module = ClassObject$1.extend({
	  utils: Utils,
	  getListener: function getListener() {
	    if (!this._listener_) this._listener_ = new Event();
	    return this._listener_;
	  },
	  destroy: function destroy() {
	    this.off();
	  },
	  on: function on(type, callback) {
	    this.getListener().on(type, callback);
	    return this;
	  },
	  off: function off(type, callback) {
	    this.getListener().off(type, callback);
	    return this;
	  },
	  proxy: function proxy(fn) {
	    if (!this._proxy_cache_) this._proxy_cache_ = {};
	    if (this.utils.isString(fn)) {
	      if (!this._proxy_cache_[fn]) {
	        this._proxy_cache_[fn] = this._super(fn);
	      }
	      return this._proxy_cache_[fn];
	    }
	    return this._super(fn);
	  },
	  trigger: function trigger() {
	    this.getListener().trigger.apply(this.getListener(), arguments);
	    return this;
	  },
	  each: function each(ob, cb) {
	    this.utils.forEach(ob, this.proxy(cb));
	  },
	  addAttr: function addAttr(el, ob) {
	    if (!this.utils.isElement(el)) return false;
	    this.utils.forEach(ob, function (v, k) {
	      el.setAttribute(k, v);
	    });
	  },
	  addCss: function addCss(el, ob) {
	    if (!this.utils.isElement(el)) return false;
	    this.utils.forEach(ob, function (v, k) {
	      this.addCssProperty(el, k, v);
	    }, this);
	  },
	  addCssProperty: function addCssProperty(el, style, value) {
	    var result = el.style.cssText.match(new RegExp('(?:[;\\s]|^)(' + style.replace('-', '\\-') + '\\s*:(.*?)(;|$))')),
	      idx;
	    if (result) {
	      idx = result.index + result[0].indexOf(result[1]);
	      el.style.cssText = el.style.cssText.substring(0, idx) + style + ': ' + value + ';' + el.style.cssText.substring(idx + result[1].length);
	    } else {
	      el.style.cssText += ' ' + style + ': ' + value + ';';
	    }
	  },
	  addEvent: function addEvent(el, ev, cb) {
	    if (!el || !ev || !cb) return false;
	    cb = this.proxy(cb);
	    if (el.addEventListener) el.addEventListener(ev, cb);else if (el['attachEvent']) el['attachEvent']('on' + ev, cb);
	  },
	  removeEvent: function removeEvent(el, ev, cb) {
	    if (!el || !ev || !cb) return false;
	    cb = this.proxy(cb);
	    if (el.removeEventListener) el.removeEventListener(ev, cb, false);else if (el['detachEvent']) el['detachEvent']('on' + ev, cb);
	  },
	  prepareForm: function prepareForm(url, data, target, method) {
	    var form = this.utils.createElement('form');
	    this.addAttr(form, {
	      action: url,
	      target: target || '_self',
	      method: method || 'POST'
	    });
	    this.addCss(form, {
	      display: 'none'
	    });
	    this.utils.forEach(data, function (v, k, el) {
	      el = this.utils.createElement('input');
	      el.type = 'hidden';
	      el.name = k;
	      el.value = v;
	      form.appendChild(el);
	    }, this);
	    return form;
	  }
	});

	var connector = {};

	var Module$9 = module.Module;
	connector.Connector = Module$9.extend({
	  ns: 'crossDomain',
	  origin: '*',
	  uniqueId: 1,
	  signature: null,
	  init: function init(params) {
	    this.setTarget(params.target);
	    this.setOrigin(params.origin);
	    this.create();
	  },
	  create: function create() {
	    this.addEvent(window, 'message', 'router');
	  },
	  setOrigin: function setOrigin(origin) {
	    this.origin = origin || '*';
	  },
	  setTarget: function setTarget(target) {
	    this.target = target;
	    return this;
	  },
	  getUID: function getUID() {
	    return ++this.uniqueId;
	  },
	  destroy: function destroy() {
	    this.removeEvent(window, 'message', 'router');
	    this._super();
	  },
	  router: function router(window, ev, response) {
	    if (this.target !== ev.source) return false;
	    try {
	      response = JSON.parse(ev.data);
	    } catch (e) {}
	    if (response && response.action && response.data) {
	      this.trigger(response.action, response.data);
	    }
	  },
	  send: function send(action, data, request, options) {
	    if (!this.target) {
	      return;
	    }
	    request = JSON.stringify({
	      action: action,
	      data: data
	    });
	    options = {
	      targetOrigin: this.origin,
	      delegate: 'payment'
	    };
	    try {
	      this.target.postMessage(request, options);
	    } catch (e) {
	      this.target.postMessage(request, this.origin, []);
	    }
	  }
	});

	var modal = {};

	var template = {};

	var views = {};

	var acs_styles = function acs_styles(data) {
	  return "\n<style>\n    .ipsp-modal {\n        box-sizing: border-box;\n        margin: 100px auto;\n        max-width: 680px;\n        background-color: #fff;\n        border-radius: 5px;\n        box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);\n        overflow: hidden;\n    }\n\n    @media (max-width: 850px) {\n        .ipsp-modal {\n            margin: 50px auto;\n        }\n    }\n\n    @media (max-width: 695px) {\n        .ipsp-modal {\n            max-width: 100%;\n            margin: 5px;\n        }\n    }\n\n    .ipsp-modal-wrapper {\n        box-sizing: border-box;\n        overflow: auto;\n        position: fixed;\n        z-index: 99999;\n        left: 0;\n        bottom: 0;\n        top: 0;\n        right: 0;\n        background-color: rgba(0, 0, 0, 0.2);\n    }\n\n    .ipsp-modal-header {\n        box-sizing: border-box;\n        background-color: #fafafa;\n        height: 50px;\n        box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);\n        border-top-left-radius: 5px;\n        border-top-right-radius: 5px;\n    }\n\n    .ipsp-modal-close {\n        box-sizing: border-box;\n        float: right;\n        overflow: hidden;\n        height: 50px;\n        text-decoration: none;\n        border-top-right-radius: 5px;\n        color: #949494;\n    }\n\n    .ipsp-modal-close:hover, .ipsp-modal-close:focus, .ipsp-modal-close:active {\n        text-decoration: none;\n        color: #646464;\n    }\n\n    .ipsp-modal-close:before {\n        content: \"\xD7\";\n        font-size: 50px;\n        line-height: 50px;\n        padding: 0 10px;\n    }\n\n    .ipsp-modal-title {\n        box-sizing: border-box;\n        border-top-left-radius: 5px;\n        line-height: 20px;\n        height: 50px;\n        padding: 5px 15px;\n        font-size: 12px;\n        display: table-cell;\n        vertical-align: middle;\n    }\n\n    .ipsp-modal-content {\n        box-sizing: border-box;\n        border-bottom-left-radius: 5px;\n        min-height: 650px;\n    }\n\n    .ipsp-modal-iframe {\n        overflow-x: hidden;\n        border: 0;\n        display: block;\n        width: 100%;\n        height: 750px;\n    }\n</style>\n";
	};

	var styles = acs_styles;
	var acs = function acs(data) {
	  return "\n".concat(styles(), "\n<div class=\"ipsp-modal-wrapper\">\n    <div class=\"ipsp-modal\">\n        <div class=\"ipsp-modal-header\">\n            <a href=\"javascript:void(0)\" class=\"ipsp-modal-close\"></a>\n            <div class=\"ipsp-modal-title\">\n                ").concat(data.messages.modalHeader, "\n                <a href='javascript:void(0)'>").concat(data.messages.modalLinkLabel, "</a>\n            </div>\n        </div>\n        <div class=\"ipsp-modal-content\">\n            <iframe src=\"about:blank\" class=\"ipsp-modal-iframe\" frameborder=\"0\" allowtransparency=\"true\"></iframe>\n        </div>\n    </div>\n</div>\n");
	};

	views.acs = acs;

	var ClassObject = _class.ClassObject;
	var Views = views;
	function empty(name) {
	  return function (data) {
	    return ['template', name, 'not found'].join(' ');
	  };
	}
	template.Template = ClassObject.extend({
	  init: function init(name) {
	    this.view = Views[name] || empty(name);
	  },
	  render: function render(data) {
	    return this.view(data);
	  }
	});

	var Module$8 = module.Module;
	var Connector$3 = connector.Connector;
	var Template = template.Template;
	modal.Modal = Module$8.extend({
	  init: function init(data) {
	    this.checkout = data.checkout;
	    this.model = data.model || {};
	    this.messages = data.checkout.params.messages || {};
	    this.template = new Template('acs');
	    this.body = this.utils.querySelector('body');
	    this.initModal();
	    this.initConnector();
	  },
	  initModal: function initModal() {
	    this.name = ['modal-iframe', this.getRandomNumber()].join('-');
	    this.modal = this.utils.createElement('div');
	    this.modal.innerHTML = this.template.render({
	      model: this.model,
	      messages: this.messages
	    });
	    this.iframe = this.find('.ipsp-modal-iframe');
	    this.addAttr(this.iframe, {
	      name: this.name,
	      id: this.name
	    });
	    if (this.model['send_data']) {
	      this.form = this.prepareForm(this.model['url'], this.model['send_data'], this.name);
	      this.modal.appendChild(this.form);
	    } else {
	      this.iframe.src = this.model['url'];
	    }
	    this.addEvent(this.find('.ipsp-modal-close'), 'click', 'closeModal');
	    this.addEvent(this.find('.ipsp-modal-title a'), 'click', 'submitForm');
	    this.initScrollbar();
	    this.body.appendChild(this.modal);
	    if (this.form) {
	      this.form.submit();
	    }
	  },
	  measureScrollbar: function measureScrollbar() {
	    var scrollDiv = document.createElement('div');
	    scrollDiv.className = 'modal-scrollbar-measure';
	    this.body.appendChild(scrollDiv);
	    this.utils.removeElement(scrollDiv);
	    return scrollDiv.offsetWidth - scrollDiv.clientWidth;
	  },
	  checkScrollbar: function checkScrollbar() {
	    var documentElementRect;
	    var fullWindowWidth = window.innerWidth;
	    if (!fullWindowWidth) {
	      documentElementRect = document.documentElement.getBoundingClientRect();
	      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	    }
	    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
	    this.scrollbarWidth = this.measureScrollbar();
	  },
	  initScrollbar: function initScrollbar() {
	    this.checkScrollbar();
	    this.bodyPad = parseInt(this.utils.getStyle(this.body, 'padding-right') || 0, 10);
	    this.originalBodyPad = document.body.style.paddingRight || '';
	    this.originalOverflow = document.body.style.overflow || '';
	    if (this.bodyIsOverflowing) {
	      this.addCss(this.body, {
	        paddingRight: [this.bodyPad + this.scrollbarWidth, 'px'].join(''),
	        overflow: 'hidden'
	      });
	    }
	  },
	  resetScrollbar: function resetScrollbar() {
	    this.addCss(this.body, {
	      paddingRight: this.originalBodyPad ? [this.originalBodyPad, 'px'].join('') : '',
	      overflow: this.originalOverflow
	    });
	  },
	  getRandomNumber: function getRandomNumber() {
	    return Math.round(Math.random() * 1000000000);
	  },
	  find: function find(selector) {
	    return this.utils.querySelector(selector, this.modal);
	  },
	  closeModal: function closeModal(el, ev) {
	    ev.preventDefault();
	    this.trigger('close', this.data);
	    this.removeModal();
	  },
	  submitForm: function submitForm(el, ev) {
	    ev.preventDefault();
	    this.trigger('submit', this.data);
	    this.addAttr(this.form, {
	      target: '_blank'
	    });
	    this.form.submit();
	  },
	  removeModal: function removeModal() {
	    this.destroy();
	  },
	  destroy: function destroy() {
	    this.utils.removeElement(this.modal);
	    this.resetScrollbar();
	    this.connector.destroy();
	    this._super();
	  },
	  initConnector: function initConnector() {
	    this.connector = new Connector$3({
	      target: this.iframe.contentWindow
	    });
	    this.connector.on('response', this.proxy('onResponse'));
	  },
	  onResponse: function onResponse(ev, data) {
	    this.sendResponse(data);
	    this.removeModal();
	  },
	  sendResponse: function sendResponse(data) {
	    this.checkout.connector.send('request', {
	      uid: data.uid,
	      action: 'api.checkout.proxy',
	      method: 'send',
	      params: data
	    });
	  }
	});

	var response = {};

	var model = {};

	var Module$7 = module.Module;
	model.Model = Module$7.extend({
	  init: function init(data) {
	    this.data = data || {};
	    this.create();
	  },
	  create: function create() {},
	  eachProps: function eachProps(args) {
	    var name = args[1] ? args[0] : null;
	    var callback = args[1] ? args[1] : args[0];
	    var list = name ? this.alt(name, []) : this.data;
	    return {
	      list: list,
	      callback: callback
	    };
	  },
	  each: function each() {
	    var props = this.eachProps(arguments);
	    for (var prop in props.list) {
	      if (props.list.hasOwnProperty(prop)) {
	        props.callback(this.instance(props.list[prop]), props.list[prop], prop);
	      }
	    }
	  },
	  filter: function filter() {
	    var props = this.eachProps(arguments);
	    for (var prop in props.list) {
	      if (props.list.hasOwnProperty(prop)) {
	        var item = this.instance(props.list[prop]);
	        if (props.callback(item, props.list[prop], prop)) {
	          return props.list[prop];
	        }
	      }
	    }
	  },
	  find: function find() {
	    var props = this.eachProps(arguments);
	    for (var prop in props.list) {
	      if (props.list.hasOwnProperty(prop)) {
	        var item = this.instance(props.list[prop]);
	        if (props.callback(item, props.list[prop], prop)) {
	          return item;
	        }
	      }
	    }
	    return false;
	  },
	  alt: function alt(prop, defaults) {
	    prop = this.attr(prop);
	    return typeof prop === 'undefined' ? defaults : prop;
	  },
	  attr: function attr(key, value) {
	    var i = 0,
	      data = this.data,
	      name = (key || '').split('.'),
	      prop = name.pop(),
	      len = arguments.length;
	    for (; i < name.length; i++) {
	      if (data && data.hasOwnProperty(name[i])) {
	        data = data[name[i]];
	      } else {
	        if (len === 2) {
	          data = data[name[i]] = {};
	        } else {
	          break;
	        }
	      }
	    }
	    if (len === 1) {
	      return data ? data[prop] : undefined;
	    }
	    if (len === 2) {
	      data[prop] = value;
	    }
	    return this;
	  },
	  stringify: function stringify() {
	    return JSON.stringify(this.serialize());
	  },
	  serialize: function serialize() {
	    return this.data;
	  }
	});

	var Model = model.Model;
	var ProxyUrl = 'http://secure-redirect.cloudipsp.com/submit/';
	response.Response = Model.extend({
	  stringFormat: function stringFormat(string) {
	    var that = this;
	    return (string || '').replace(/{(.+?)}/g, function (match, prop) {
	      return that.attr(['order.order_data', prop].join('.')) || match;
	    });
	  },
	  setConnector: function setConnector(connector) {
	    this.connector = connector;
	    return this;
	  },
	  setUID: function setUID(uid) {
	    this.uid = uid;
	    return this;
	  },
	  getUID: function getUID() {
	    return this.uid;
	  },
	  formDataProxy: function formDataProxy(url, data, target, method) {
	    location.assign([ProxyUrl, JSON.stringify({
	      url: url,
	      params: data,
	      target: target,
	      method: method
	    })].join('#'));
	  },
	  formDataSubmit: function formDataSubmit(url, data, target, method) {
	    if (url.match(/^http:/)) {
	      return this.formDataProxy(url, data, target, method);
	    }
	    var action = this.stringFormat(url);
	    var form = this.prepareForm(action, data, target, method);
	    var body = this.utils.querySelector('body');
	    body.appendChild(form);
	    form.submit();
	    form.parentNode.removeChild(form);
	  },
	  inProgress: function inProgress() {
	    return this.attr('order.in_progress');
	  },
	  readyToSubmit: function readyToSubmit() {
	    return this.attr('order.ready_to_submit');
	  },
	  waitForResponse: function waitForResponse() {
	    return this.attr('order.pending');
	  },
	  needVerifyCode: function needVerifyCode() {
	    return this.attr('order.need_verify_code');
	  },
	  redirectUrl: function redirectUrl() {
	    if (this.attr('url')) {
	      this.redirectToUrl(this.attr('url'));
	      return true;
	    }
	    return false;
	  },
	  redirectToUrl: function redirectToUrl(url) {
	    location.assign(url);
	  },
	  submitToMerchant: function submitToMerchant() {
	    var ready = this.attr('order.ready_to_submit');
	    var url = this.attr('model.url') || this.attr('order.response_url');
	    var method = this.attr('order.method');
	    var action = this.attr('order.action');
	    var data = this.attr('model.send_data') || this.attr('order.order_data');
	    if (ready && url && data) {
	      if (action === 'redirect' || data['get_without_parameters'] === true) {
	        this.redirectToUrl(url);
	      } else {
	        this.formDataSubmit(url, data, '_self', method);
	      }
	      return true;
	    }
	  },
	  submitForm: function submitForm() {
	    var method = this.attr('method');
	    var url = this.attr('url');
	    var data = this.attr('send_data');
	    if (url && data) {
	      this.formDataSubmit(url, data, '_self', method);
	      return true;
	    }
	    return false;
	  },
	  sendResponse: function sendResponse() {
	    var action = this.attr('action');
	    if (action === 'submit') return this.submitForm();
	    if (action === 'redirect') return this.redirectUrl();
	    return false;
	  },
	  prepare3dsData: function prepare3dsData() {
	    var params = {};
	    var data = this.attr('submit3ds');
	    if (data['3ds']) {
	      params.token = this.attr('token');
	      params.uid = this.getUID();
	      params.frame = true;
	      if (data['send_data'].TermUrl) {
	        data['send_data'].TermUrl = [data['send_data'].TermUrl, this.utils.param(params)].join('#!!');
	      }
	    }
	    return data;
	  },
	  waitOn3dsDecline: function waitOn3dsDecline() {
	    var data = this.alt('submit3ds.checkout_data', {
	      js_wait_on_3ds_decline: false,
	      js_wait_on_3ds_decline_duration: 0
	    });
	    return data.js_wait_on_3ds_decline ? data.js_wait_on_3ds_decline_duration : 0;
	  },
	  submit3dsForm: function submit3dsForm() {
	    if (this.attr('submit3ds.checkout_data')) {
	      this.connector.trigger('modal', this.prepare3dsData());
	    }
	  },
	  supportedMethod: function supportedMethod(method) {
	    var item = this.find('methods', function (item) {
	      return item.alt('supportedMethods', '').match(method);
	    });
	    if (item) {
	      this.attr('methods', [item.serialize()]);
	    } else {
	      this.attr('methods', []);
	    }
	  }
	});

	var Deferred$2 = deferred.Deferred;
	var Module$6 = module.Module;
	var Connector$2 = connector.Connector;
	var Modal = modal.Modal;
	var Response = response.Response;
	var ApiFrameCss = config.ApiFrameCss;
	api.Api = Module$6.extend({
	  defaults: {
	    origin: 'https://api.fondy.eu',
	    endpoint: {
	      gateway: '/checkout/v2/index.html'
	    },
	    messages: {
	      modalHeader: 'Now you will be redirected to your bank 3DSecure. If you are not redirected please refer',
	      modalLinkLabel: 'link'
	    }
	  },
	  init: function init(params) {
	    this.initParams(params);
	  },
	  url: function url(type, _url) {
	    return [this.params.origin, this.params.endpoint[type] || '/', _url || ''].join('');
	  },
	  extendParams: function extendParams(params) {
	    this.utils.extend(this.params, params);
	    return this;
	  },
	  initParams: function initParams(params) {
	    this.params = this.utils.extend({}, this.defaults);
	    this.extendParams(params);
	    this.setOrigin(this.params.origin);
	    this.loaded = false;
	    this.created = false;
	  },
	  setOrigin: function setOrigin(origin) {
	    if (this.utils.isString(origin)) {
	      this.params.origin = origin;
	    }
	    return this;
	  },
	  scope: function scope(callback) {
	    callback = this.proxy(callback);
	    if (this._createFrame().loaded === true) {
	      callback();
	    } else {
	      this.on('checkout.api', callback);
	    }
	  },
	  request: function request(model, method, params) {
	    var defer = Deferred$2();
	    var data = {
	      uid: this.connector.getUID(),
	      action: model,
	      method: method,
	      params: params || {}
	    };
	    this.connector.send('request', data);
	    this.connector.on(data.uid, this.proxy(function (ev, response, model, action) {
	      var responseModel = new Response(response);
	      responseModel.setUID(data.uid);
	      responseModel.setConnector(this.connector);
	      action = 'resolveWith';
	      if (responseModel.attr('submit3ds')) {
	        action = 'notifyWith';
	      }
	      if (responseModel.attr('error')) {
	        action = 'rejectWith';
	      }
	      defer[action](this, [responseModel]);
	    }));
	    return defer;
	  },
	  _loadFrame: function _loadFrame(url) {
	    this.iframe = this.utils.createElement('iframe');
	    this.addAttr(this.iframe, {
	      allowtransparency: true,
	      frameborder: 0,
	      scrolling: 'no'
	    });
	    this.addAttr(this.iframe, {
	      src: url
	    });
	    this.addCss(this.iframe, ApiFrameCss);
	    this.body = this.utils.querySelector('body');
	    if (this.body.firstChild) {
	      this.body.insertBefore(this.iframe, this.body.firstChild);
	    } else {
	      this.body.appendChild(this.iframe);
	    }
	    return this.iframe;
	  },
	  _createFrame: function _createFrame() {
	    if (this.created === false) {
	      this.created = true;
	      this.iframe = this._loadFrame(this.url('gateway'));
	      this.connector = new Connector$2({
	        target: this.iframe.contentWindow,
	        origin: this.params.origin
	      });
	      this.connector.on('load', this.proxy('_onLoadConnector'));
	      this.connector.on('modal', this.proxy('_onOpenModal'));
	    }
	    return this;
	  },
	  _onOpenModal: function _onOpenModal(xhr, model) {
	    this.modal = new Modal({
	      checkout: this,
	      model: model
	    });
	    this.modal.on('close', this.proxy('_onCloseModal'));
	  },
	  _onCloseModal: function _onCloseModal(modal, data) {
	    this.trigger('modal.close', modal, data);
	  },
	  _onLoadConnector: function _onLoadConnector() {
	    this.loaded = true;
	    this.connector.off('load');
	    this.trigger('checkout.api');
	    this.off('checkout.api');
	  }
	});

	var button$1 = {};

	var request = {};

	var pay = {};

	var Deferred$1 = deferred.Deferred;
	var Module$5 = module.Module;
	var GooglePayApi = config.GooglePayApi,
	  GoogleBaseRequest$1 = config.GoogleBaseRequest;
	var GooglePay$1 = Module$5.extend({
	  id: 'google-payments-api',
	  init: function init() {
	    this.client = null;
	    this.wrapper = this.utils.querySelector('head');
	    this.defer = Deferred$1();
	  },
	  load: function load() {
	    if (this.utils.getPath('google.payments.api.PaymentsClient')) {
	      return this.defer.resolveWith(this);
	    }
	    if (this.utils.querySelector('#'.concat(this.id))) {
	      return this.defer;
	    }
	    this.script = this.utils.createElement('script');
	    this.addAttr(this.script, {
	      id: this.id,
	      async: true,
	      src: GooglePayApi
	    });
	    this.utils.isElement(this.wrapper) && this.wrapper.appendChild(this.script);
	    this.addEvent(this.script, 'load', 'onLoadSuccess');
	    this.addEvent(this.script, 'error', 'onLoadError');
	    return this.defer;
	  },
	  show: function show(methods) {
	    var method = methods.find(function (item) {
	      return item.supportedMethods === 'https://google.com/pay';
	    });
	    var client = this.getClient({
	      environment: method.data.environment
	    });
	    return client.loadPaymentData(method.data);
	  },
	  readyToPay: function readyToPay(cx, response) {
	    if (response.result) {
	      this.defer.resolveWith(this);
	    }
	  },
	  onError: function onError(cx, error) {
	    this.defer.rejectWith(this, error);
	  },
	  onLoadSuccess: function onLoadSuccess() {
	    var client = this.getClient();
	    if (client) client.isReadyToPay(GoogleBaseRequest$1).then(this.proxy('readyToPay'))["catch"](this.proxy('onError'));
	  },
	  onLoadError: function onLoadError() {
	    this.defer.rejectWith(this);
	  },
	  getClient: function getClient(options) {
	    if (options || this.client === null) {
	      var PaymentClient = this.utils.getPath('google.payments.api.PaymentsClient');
	      if (PaymentClient) {
	        this.client = new PaymentClient(options);
	      } else {
	        this.onError(null, new Error('Google Client Error'));
	      }
	    }
	    return this.client;
	  }
	});
	pay.GooglePay = new GooglePay$1();

	var Module$4 = module.Module;
	var Api$2 = api.Api;
	var GooglePay = pay.GooglePay;
	var Deferred = deferred.Deferred;
	var getPaymentRequest = utils.getPaymentRequest,
	  hasProp = utils.hasProp,
	  isFunction = utils.isFunction;
	var GoogleBaseRequest = config.GoogleBaseRequest,
	  PaymentRequestDetails = config.PaymentRequestDetails;
	var getPaymentMethods = function getPaymentMethods() {
	  return [['google', {
	    supportedMethods: 'https://google.com/pay',
	    data: GoogleBaseRequest
	  }], ['apple', {
	    supportedMethods: 'https://apple.com/apple-pay'
	  }, function () {
	    return hasProp(window, 'ApplePaySession');
	  }]];
	};
	var requestDeferred = null;
	var requestSupported = {
	  fallback: false,
	  provider: []
	};
	var _getSupportedMethods = function getSupportedMethods() {
	  if (requestDeferred) return requestDeferred;
	  requestDeferred = Deferred();
	  var methods = getPaymentMethods();
	  var details = PaymentRequestDetails;
	  (function check() {
	    var item = methods.shift();
	    if (item === undefined) {
	      if (requestSupported.provider.indexOf('google') === -1) {
	        requestSupported.fallback = true;
	        requestSupported.provider.push('google');
	      }
	      return requestDeferred.resolve(requestSupported);
	    }
	    var method = item.shift();
	    var config = item.shift();
	    var callback = item.shift();
	    if (isFunction(callback) && callback() === false) {
	      setTimeout(check, 25);
	      return false;
	    }
	    var request = getPaymentRequest([config], details, {});
	    if (request) {
	      request.canMakePayment().then(function (status) {
	        if (status === true) requestSupported.provider.push(method);
	        setTimeout(check, 25);
	      })["catch"](function () {
	        setTimeout(check, 25);
	      });
	    } else {
	      setTimeout(check, 25);
	    }
	  })();
	  return requestDeferred;
	};
	var PaymentRequestInterface = Module$4.extend({
	  config: {
	    payment_system: '',
	    fallback: false,
	    methods: [],
	    details: {},
	    options: {}
	  },
	  supported: {
	    fallback: false,
	    provider: []
	  },
	  payload: {
	    payment_system: null,
	    provider: []
	  },
	  params: {},
	  getSupportedMethods: function getSupportedMethods() {
	    var _this = this;
	    return _getSupportedMethods().then(function (supported) {
	      _this.setSupported(supported);
	      return supported;
	    });
	  },
	  init: function init(params) {
	    this.params = params || {};
	  },
	  setSupported: function setSupported(supported) {
	    this.supported = supported;
	    this.trigger('supported', supported);
	    return this;
	  },
	  setPayload: function setPayload(payload) {
	    this.payload = payload;
	    this.trigger('payload', payload);
	    return this;
	  },
	  setMerchant: function setMerchant(merchant) {
	    this.merchant = merchant;
	  },
	  setApi: function setApi(api) {
	    if (api instanceof Api$2) this.api = api;
	    return this;
	  },
	  getProviderPayload: function getProviderPayload(method) {
	    return this.payload.provider[method] || {};
	  },
	  isMethodSupported: function isMethodSupported(method) {
	    return this.supported.provider.indexOf(method) !== -1;
	  },
	  isFallbackMethod: function isFallbackMethod(method) {
	    return method === 'google' && this.supported.fallback;
	  }
	});
	/**
	 * @constructor
	 */
	var PaymentRequestApi$3 = PaymentRequestInterface.extend({
	  request: function request(method, params, success, failure) {
	    if (this.api) {
	      this.api.scope(this.proxy(function () {
	        this.api.request('api.checkout.pay', method, params).done(this.proxy(success)).fail(this.proxy(failure));
	      }));
	    }
	  },
	  update: function update(data) {
	    this.request('methods', data, 'onUpdate', 'onError');
	  },
	  onUpdate: function onUpdate(cx, model) {
	    this.setPayload(model.serialize());
	  },
	  onError: function onError(cx, error) {
	    this.trigger('error', error);
	  },
	  isPending: function isPending() {
	    return this.pendingState === true;
	  },
	  setPending: function setPending(state) {
	    var _this2 = this;
	    this.pendingState = state;
	    setTimeout(function () {
	      _this2.trigger('pending', state);
	    }, 100);
	  },
	  pay: function pay(method) {
	    if (this.isPending()) return;
	    this.setPending(true);
	    var payload = this.getProviderPayload(method);
	    var response = Deferred();
	    response.always(function () {
	      this.setPending(false);
	    });
	    if (this.isMethodSupported(method) === false) {
	      return response.rejectWith(this, [{
	        test: true
	      }]);
	    }
	    if (this.isFallbackMethod(method)) {
	      this.makePaymentFallback(response, payload.methods);
	    } else {
	      this.makeNativePayment(response, payload);
	    }
	    return response.done(function (details) {
	      this.trigger('details', {
	        payment_system: this.payload.payment_system,
	        data: details
	      });
	    }).fail(function (error) {
	      this.trigger('error', error);
	      if (this.params.embedded === true) {
	        location.reload();
	        this.trigger('reload', this.params);
	      }
	    });
	  },
	  makeNativePayment: function makeNativePayment(defer, payload) {
	    var self = this;
	    var request = getPaymentRequest(payload.methods, payload.details, payload.options);
	    this.addEvent(request, 'merchantvalidation', 'merchantValidation');
	    request.canMakePayment().then(function () {
	      request.show().then(function (response) {
	        response.complete('success').then(function () {
	          defer.resolveWith(self, [response.details]);
	        });
	      })["catch"](function (e) {
	        defer.rejectWith(self, [{
	          code: e.code,
	          message: e.message
	        }]);
	      });
	    })["catch"](function (e) {
	      defer.rejectWith(self, [{
	        code: e.code,
	        message: e.message
	      }]);
	    });
	  },
	  makePaymentFallback: function makePaymentFallback(defer, methods) {
	    var self = this;
	    GooglePay.load().then(function () {
	      GooglePay.show(methods).then(function (details) {
	        defer.resolveWith(self, [details]);
	      })["catch"](function (e) {
	        defer.rejectWith(self, [{
	          code: e.code,
	          message: e.message
	        }]);
	      });
	    });
	  },
	  appleSession: function appleSession(params) {
	    var defer = Deferred();
	    this.request('session', params, function (c, model) {
	      defer.resolveWith(this, [model.serialize()]);
	    }, function (c, model) {
	      defer.rejectWith(this, [model]);
	    });
	    return defer;
	  },
	  merchantValidation: function merchantValidation(cx, event) {
	    var validationURL = event.validationURL;
	    var _location = location,
	      host = _location.host;
	    this.appleSession({
	      url: validationURL,
	      domain: host,
	      merchant_id: this.merchant
	    }).done(function (session) {
	      try {
	        event.complete(session.data);
	      } catch (error) {
	        this.trigger('error', error);
	      }
	    }).fail(function (error) {
	      this.trigger('error', error);
	    });
	  }
	});
	request.PaymentRequestApi = PaymentRequestApi$3;

	var element = {};

	var Module$3 = module.Module;
	var Connector$1 = connector.Connector;
	var ButtonContainerCss = config.ButtonContainerCss,
	  ButtonCoverCss = config.ButtonCoverCss,
	  ButtonCoverAttrs = config.ButtonCoverAttrs,
	  ButtonFrameCss = config.ButtonFrameCss,
	  ButtonFrameAttrs = config.ButtonFrameAttrs;
	var PaymentRequestApi$2 = request.PaymentRequestApi;
	element.PaymentElement = Module$3.extend({
	  defaults: {
	    method: null,
	    appendTo: null,
	    className: 'payment-element',
	    origin: 'https://pay.fondy.eu',
	    endpoint: '/latest/checkout/v2/button/element.html',
	    mode: 'plain',
	    color: 'black',
	    lang: 'en',
	    height: 38
	  },
	  init: function init(params) {
	    this.params = {};
	    this.utils.extend(this.params, this.defaults);
	    this.utils.extend(this.params, params);
	    this.initElement();
	  },
	  getElementUrl: function getElementUrl() {
	    return [this.params.origin, this.params.endpoint].join('');
	  },
	  getElementOptions: function getElementOptions() {
	    return this.utils.param({
	      method: this.params.method,
	      mode: this.params.mode,
	      style: this.params.style,
	      color: this.params.color,
	      lang: this.params.lang
	    });
	  },
	  initElement: function initElement() {
	    this.element = this.utils.createElement('div');
	    this.iframe = this.utils.createElement('iframe');
	    this.button = this.utils.createElement('a');
	    this.addCss(this.element, ButtonContainerCss);
	    this.addCss(this.button, ButtonCoverCss);
	    this.addAttr(this.button, ButtonCoverAttrs);
	    this.addCss(this.iframe, ButtonFrameCss);
	    this.addAttr(this.iframe, ButtonFrameAttrs);
	    this.addAttr(this.iframe, {
	      src: [this.getElementUrl(), this.getElementOptions()].join('?')
	    });
	    this.addEvent(this.iframe, 'load', 'onloadConnector');
	    this.addEvent(this.iframe, 'error', 'errorConnector');
	    this.addAttr(this.element, {
	      "class": this.params.className
	    });
	    this.element.appendChild(this.iframe);
	    this.element.appendChild(this.button);
	  },
	  errorConnector: function errorConnector() {
	    log('frame load error');
	  },
	  onloadConnector: function onloadConnector() {
	    this.connector = new Connector$1({
	      target: this.iframe.contentWindow,
	      origin: this.params.origin
	    });
	  },
	  send: function send(action, data) {
	    if (this.connector) {
	      this.connector.send(action, data);
	    }
	  },
	  onEvent: function onEvent(cx, ev) {
	    ev.preventDefault();
	    if (this.pending) return false;
	    this.send('event', {
	      type: ev.type
	    });
	  },
	  onClick: function onClick() {
	    if (this.pending) return false;
	    this.request.pay(this.params.method);
	  },
	  onSupported: function onSupported(cx, supported) {
	    if (supported.provider.includes(this.params.method)) {
	      this.mount();
	    }
	  },
	  onPayload: function onPayload(cx, payload) {
	    if (payload.allowed.includes(this.params.method)) {
	      this.show();
	    }
	  },
	  onPending: function onPending(cx, state) {
	    this.pending = state;
	    this.send('pending', {
	      state: state
	    });
	  },
	  initEvents: function initEvents() {
	    this.addEvent(this.button, 'mouseenter', 'onEvent');
	    this.addEvent(this.button, 'mouseleave', 'onEvent');
	    this.addEvent(this.button, 'blur', 'onEvent');
	    this.addEvent(this.button, 'focus', 'onEvent');
	    this.addEvent(this.button, 'click', 'onClick');
	  },
	  setPaymentRequest: function setPaymentRequest(request) {
	    if (!(request instanceof PaymentRequestApi$2)) throw Error('request is not instance of PaymentRequestApi');
	    this.request = request;
	    var onSupported = this.proxy('onSupported');
	    var onPayload = this.proxy('onPayload');
	    var onPending = this.proxy('onPending');
	    this.request.off('supported', onSupported).on('supported', onSupported);
	    this.request.off('payload', onPayload).on('payload', onPayload);
	    this.request.off('pending', onPending).on('pending', onPending);
	    return this;
	  },
	  appendTo: function appendTo(_appendTo) {
	    var container = this.utils.querySelector(_appendTo);
	    if (container) container.appendChild(this.element);
	    this.initEvents();
	    return this;
	  },
	  mount: function mount() {
	    this.appendTo(this.params.appendTo);
	  },
	  isMounted: function isMounted() {
	    return document.body.contains(this.element);
	  },
	  show: function show() {
	    if (this.isMounted() === false) return this;
	    this.addCss(this.iframe, {
	      transition: 'opacity 0.6s 0.4s ease-out',
	      opacity: this.utils.cssUnit(1)
	    });
	    this.addCss(this.element, {
	      transition: 'height 0.2s ease-out',
	      height: this.utils.cssUnit(this.params.height, 'px')
	    });
	    this.trigger('show', {});
	    return this;
	  },
	  hide: function hide() {
	    if (this.isMounted() === false) return this;
	    this.addCss(this.iframe, {
	      transition: 'opacity 0.4s ease-out',
	      opacity: this.utils.cssUnit(0)
	    });
	    this.addCss(this.element, {
	      transition: 'height 0.2s 0.4s ease-out',
	      height: this.utils.cssUnit(0, 'px')
	    });
	    this.trigger('hide', {});
	    return this;
	  }
	});

	var Module$2 = module.Module;
	var Api$1 = api.Api;
	var PaymentRequestApi$1 = request.PaymentRequestApi;
	var PaymentElement = element.PaymentElement;
	var forEach = utils.forEach;
	button$1.PaymentButton = Module$2.extend({
	  defaults: {
	    origin: 'https://api.fondy.eu',
	    methods: ['apple', 'google'],
	    element: null,
	    style: {
	      height: 38,
	      mode: 'default',
	      type: 'long',
	      color: 'black'
	    },
	    data: {
	      lang: 'en'
	    }
	  },
	  init: function init(params) {
	    this.elements = {};
	    this.supported = false;
	    this.params = {
	      element: params.element,
	      methods: params.methods || this.defaults.methods,
	      origin: params.origin || this.defaults.origin,
	      endpoint: this.utils.extend({}, this.defaults.endpoint, params.endpoint),
	      style: this.utils.extend({}, this.defaults.style, params.style),
	      data: this.utils.extend({}, this.defaults.data, params.data)
	    };
	    this.initApi(params.api);
	    this.initPaymentRequestApi();
	    this.initElements();
	    this.update();
	  },
	  initApi: function initApi(api) {
	    if (api instanceof Api$1) {
	      this.api = api;
	    } else {
	      this.api = new Api$1({
	        origin: this.params.origin,
	        endpoint: this.params.endpoint
	      });
	    }
	  },
	  initPaymentRequestApi: function initPaymentRequestApi() {
	    this.request = new PaymentRequestApi$1();
	    this.request.setApi(this.api);
	    this.request.setMerchant(this.params.data.merchant_id);
	    this.request.getSupportedMethods();
	    this.request.on('details', this.proxy('onDetails'));
	    this.request.on('error', this.proxy('onError'));
	  },
	  initElements: function initElements() {
	    var style = this.params.style;
	    var data = this.params.data;
	    var origin = this.params.origin;
	    var appendTo = this.params.element;
	    var request = this.request;
	    this.container = this.utils.querySelector(this.params.element);
	    this.addCss(this.container, {
	      display: 'flex',
	      gap: '1rem',
	      'flex-direction': 'column'
	    });
	    forEach(this.params.methods, function (method) {
	      var element = new PaymentElement({
	        origin: origin,
	        method: method,
	        appendTo: appendTo,
	        color: style.color,
	        mode: style.mode,
	        lang: data.lang,
	        height: style.height
	      });
	      element.setPaymentRequest(request);
	    });
	  },
	  update: function update(data) {
	    var params = this.utils.extend(this.params.data, data || {});
	    this.request.update(params);
	  },
	  onDetails: function onDetails(cx, data) {
	    var _this = this;
	    var params = this.utils.extend({}, this.params.data, data);
	    this.api.scope(function () {
	      _this.api.request('api.checkout.form', 'request', params).done(_this.proxy('onSuccess')).fail(_this.proxy('onError'));
	    });
	  },
	  onSuccess: function onSuccess(cx, data) {
	    this.trigger('success', data);
	  },
	  onError: function onError(cx, data) {
	    this.trigger('error', data);
	  }
	});

	var container = {};

	var Module$1 = module.Module;
	var Connector = connector.Connector;
	var PaymentRequestApi = request.PaymentRequestApi;
	var GooglePayLanguages = config.GooglePayLanguages,
	  ButtonColorMap = config.ButtonColorMap,
	  ButtonDefaultColor = config.ButtonDefaultColor,
	  ButtonLabelMap = config.ButtonLabelMap;
	var parseConfig = function parseConfig(config) {
	  var data = {
	    payment_system: config.payment_system,
	    provider: {}
	  };
	  var methods = config.methods || [];
	  var details = config.details || {};
	  var options = config.options || {};
	  var regex = new RegExp('//([a-z]+)\\.com/');
	  methods.forEach(function (item) {
	    var match = regex.exec(item.supportedMethods);
	    if (match === null) return;
	    data.provider[match[1]] = {
	      methods: [item],
	      details: details,
	      options: options
	    };
	  });
	  return data;
	};
	container.PaymentContainer = Module$1.extend({
	  defaults: {
	    element: null,
	    method: 'card',
	    data: {
	      lang: 'en'
	    },
	    style: {}
	  },
	  init: function init(params) {
	    this.initParams(params);
	    this.initEvents();
	  },
	  initParams: function initParams(params) {
	    this.params = this.utils.extend({}, this.defaults, params);
	    this.element = this.utils.querySelector(this.params.element);
	    this.connector = new Connector({
	      target: window.parent
	    });
	    this.payment = new PaymentRequestApi({
	      embedded: true
	    });
	  },
	  extendParams: function extendParams(params) {
	    this.utils.extend(this.params, {
	      method: params.method,
	      style: params.style,
	      data: params.data,
	      css: params.css
	    });
	  },
	  getGoogleLangSupport: function getGoogleLangSupport(lang, defaults) {
	    return GooglePayLanguages.indexOf(lang) !== -1 ? lang : defaults;
	  },
	  getButtonColor: function getButtonColor(color) {
	    return ButtonColorMap[color] || ButtonDefaultColor;
	  },
	  getGoogleSvg: function getGoogleSvg(color, lang, mode) {
	    var params = {
	      endpoint: 'https://www.gstatic.com/instantbuy/svg',
	      color: this.getButtonColor(color),
	      mode: mode || 'plain',
	      lang: lang || 'en'
	    };
	    var format = 'url("{endpoint}/{color}/{mode}/{lang}.svg")';
	    if (mode === 'plain') {
	      format = 'url("{endpoint}/{color}_gpay.svg")';
	    }
	    if (mode === 'buy') {
	      format = 'url("{endpoint}/{color}/{lang}.svg")';
	    }
	    return this.utils.stringFormat(format, params);
	  },
	  getAppleSvg: function getAppleSvg(color) {
	    var format = 'url("svg/apple-pay-{color}.svg")';
	    var params = {
	      color: this.getButtonColor(color)
	    };
	    return this.utils.stringFormat(format, params);
	  },
	  getAppleLabel: function getAppleLabel(lang) {
	    return ButtonLabelMap[lang || 'en'];
	  },
	  addFrameImage: function addFrameImage() {
	    var frame = this.utils.querySelector('iframe', this.element) || this.utils.createElement('iframe');
	    var url = 'https://pay.google.com/gp/p/generate_gpay_btn_img';
	    var style = this.params.style || {};
	    var lang = this.getGoogleLangSupport(this.params.data.lang, 'en');
	    var query = {
	      buttonColor: style.color || 'black',
	      browserLocale: lang,
	      buttonSizeMode: 'fill'
	    };
	    var src = [url, this.utils.param(query)].join('?');
	    this.addAttr(frame, {
	      scrolling: 'no',
	      frameborder: 0,
	      src: src
	    });
	    this.element.appendChild(frame);
	    this.element.classList.remove('short', 'long');
	  },
	  styleButton: function styleButton() {
	    var element = this.element;
	    var params = this.params;
	    var method = params.method;
	    var style = params.style || {};
	    var lang = params.data.lang || 'en';
	    var css = params.css || {};
	    element.setAttribute('class', '');
	    element.classList.add('button', 'pending');
	    if (method === 'card') method = 'google';
	    if (method) {
	      element.classList.add(method);
	    }
	    if (lang) {
	      element.classList.add(lang);
	    }
	    if (style.type) {
	      element.classList.add(style.type);
	    }
	    if (style.mode) {
	      element.classList.add(style.mode);
	    }
	    if (style.color) {
	      element.classList.add(style.color);
	    }
	    if (method === 'google') {
	      if (style.type === 'short') {
	        style.mode = 'plain';
	      }
	      if (style.mode === 'default') {
	        this.addFrameImage();
	      } else {
	        css.image = this.getGoogleSvg(style.color, lang, style.mode);
	      }
	    }
	    if (method === 'apple') {
	      css.image = this.getAppleSvg(style.color);
	      css.label = this.getAppleLabel(lang, style.mode);
	    }
	    if (css) {
	      this.utils.forEach(css, function (value, name) {
	        element.style.setProperty(['--', name].join(''), value);
	      });
	    }
	  },
	  initEvents: function initEvents() {
	    this.payment.on('details', this.proxy(function (cx, data) {
	      this.connector.send('details', data);
	      this.connector.send('complete', data);
	    }));
	    this.payment.on('reload', this.proxy(function (cx, data) {
	      this.connector.send('reload', data);
	    }));
	    this.payment.on('error', this.proxy(function (cx, data) {
	      this.connector.send('error', data);
	    }));
	    this.connector.on('options', this.proxy(function (cx, data) {
	      this.extendParams(data);
	      this.styleButton();
	    }));
	    this.connector.on('pay', this.proxy(function () {
	      if (!this.element.classList.contains('pending')) {
	        if (this.params.method === 'apple') {
	          var payload = this.payment.payload || {};
	          var apple = payload.provider['apple'] || {};
	          this.connector.send('pay', {
	            payment_system: payload.payment_system,
	            methods: apple.methods,
	            details: apple.details,
	            options: apple.options
	          });
	        } else {
	          this.payment.setSupported({
	            fallback: false,
	            provider: ['google']
	          }).pay('google');
	        }
	      }
	    }));
	    this.connector.on('config', this.proxy(function (cx, data) {
	      this.payment.setPayload(data = parseConfig(data));
	      if (data.payment_system && Object.keys(data.provider).length > 0) {
	        this.element.classList.remove('pending');
	        this.element.classList.add('ready');
	        this.connector.send('show', {});
	      } else {
	        this.connector.send('hide', {});
	      }
	    }));
	    this.connector.on('event', this.proxy(function (cx, data) {
	      if (data.type === 'mouseenter') {
	        this.element.classList.add('hover');
	      }
	      if (data.type === 'mouseleave') {
	        this.element.classList.remove('hover');
	      }
	      if (data.type === 'focusin') {
	        this.element.classList.add('active');
	      }
	      if (data.type === 'focusout') {
	        this.element.classList.remove('active');
	      }
	    }));
	  }
	});

	var form = {};

	var widget = {};

	var Api = api.Api;
	widget.Widget = Api.extend({
	  init: function init(params) {
	    this.initParams(params);
	    this.initWidget();
	  },
	  initWidget: function initWidget() {
	    this.initOptions(this.params.options);
	    if (this.utils.isString(this.params.element)) {
	      this.initElement(this.params.element);
	    }
	  },
	  initOptions: function initOptions() {
	    if (this.utils.isPlainObject(this.params.options)) {
	      this.params.options = this.params.options || {};
	    }
	  },
	  initElement: function initElement(el) {},
	  addSelectorEvent: function addSelectorEvent(el, ev, cb) {
	    this.each(this.utils.querySelectorAll(el), function (cx, element) {
	      this.addEvent(element, ev, cb);
	    });
	    return this;
	  },
	  getRequestParams: function getRequestParams() {
	    return {};
	  },
	  sendRequest: function sendRequest(el, ev) {
	    if (ev.defaultPrevented) return;
	    ev.preventDefault();
	    this.trigger('request', this.getRequestParams(el));
	    this.scope(function () {
	      this.request('api.checkout.form', 'request', this.getRequestParams(el)).done(this.proxy('onSuccess')).fail(this.proxy('onError')).progress(this.proxy('onProgress'));
	    });
	  },
	  onProgress: function onProgress(cx, model) {
	    this.trigger('progress', model);
	  },
	  onSuccess: function onSuccess(cx, model) {
	    model.sendResponse();
	    model.submitToMerchant();
	    this.trigger('success', model);
	  },
	  onError: function onError(cx, model) {
	    this.trigger('error', model);
	  }
	});

	var Module = module.Module;
	var Widget$1 = widget.Widget;
	var FormData = Module.extend({
	  init: function init(form) {
	    this.setFormElement(form);
	  },
	  setFormElement: function setFormElement(form) {
	    if (this.utils.isElement(form)) {
	      this.form = form;
	    }
	  },
	  getData: function getData(filter) {
	    var params = this.deparam(this.serializeArray());
	    return filter === true ? this.utils.cleanObject(params) : params;
	  },
	  serializeArray: function serializeArray() {
	    var list = this.utils.toArray(this.form.elements);
	    return this.utils.map(list, function (field) {
	      if (field.disabled || field.name === '') return;
	      if (field.type.match('checkbox|radio') && !field.checked) return;
	      return {
	        name: field.name,
	        value: field.value
	      };
	    });
	  },
	  serializeAndEncode: function serializeAndEncode() {
	    return this.utils.map(this.serializeArray(), function (field) {
	      return [field.name, encodeURIComponent(field.value)].join('=');
	    }).join('&');
	  },
	  deparam: function deparam(obj) {
	    var prop,
	      result = {};
	    var breaker = /[^\[\]]+|\[\]$/g;
	    var attr = function attr(name, value) {
	      var i,
	        data = result,
	        last = name.pop(),
	        len = name.length;
	      for (i = 0; i < len; i++) {
	        if (!data[name[i]]) data[name[i]] = len === i + 1 && last === '[]' ? [] : {};
	        data = data[name[i]];
	      }
	      if (last === '[]') {
	        data.push(value);
	      } else {
	        data[last] = value;
	      }
	    };
	    for (prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        attr(obj[prop].name.match(breaker), obj[prop].value);
	      }
	    }
	    return result;
	  }
	});
	form.WidgetForm = Widget$1.extend({
	  initElement: function initElement(el) {
	    this.addSelectorEvent(el, 'submit', 'sendRequest');
	  },
	  getRequestParams: function getRequestParams(el) {
	    return this.utils.extend({}, this.params.options, new FormData(el).getData());
	  }
	});

	var button = {};

	var Widget = widget.Widget;
	button.WidgetButton = Widget.extend({
	  attributes: {},
	  initElement: function initElement(el) {
	    if (this.utils.isPlainObject(this.params.attributes)) {
	      this.utils.extend(this.attributes, this.params.attributes);
	    }
	    this.addSelectorEvent(el, 'click', 'sendRequest');
	  },
	  getRequestParams: function getRequestParams(el) {
	    return this.utils.extend({}, this.params.options, this.getElementData(el));
	  },
	  getElementData: function getElementData(el) {
	    var result = {};
	    this.utils.forEach(this.attributes, function (value, key) {
	      if (el.hasAttribute(key)) {
	        result[value] = el.getAttribute(key);
	      }
	    });
	    return result;
	  }
	});

	(function (module$1, exports) {
	  var Component = component.Component;
	  var Utils = utils;
	  var Config = config;
	  var Api = api.Api;
	  var Module = module.Module;
	  var Connector = connector.Connector;
	  var Response = response.Response;
	  var PaymentButton = button$1.PaymentButton;
	  var PaymentRequestApi = request.PaymentRequestApi;
	  var PaymentElement = element.PaymentElement;
	  var PaymentContainer = container.PaymentContainer;
	  var WidgetForm = form.WidgetForm;
	  var WidgetButton = button.WidgetButton;
	  Component.add('Api', Api);
	  Component.add('Connector', Connector);
	  Component.add('PaymentButton', PaymentButton);
	  Component.add('PaymentRequestApi', PaymentRequestApi);
	  Component.add('PaymentElement', PaymentElement);
	  Component.add('FormWidget', WidgetForm);
	  Component.add('ButtonWidget', WidgetButton);
	  Component.Utils = exports.Utils = Utils;
	  Component.Config = exports.Config = Config;
	  Component.Api = exports.Api = Api;
	  Component.Module = exports.Module = Module;
	  Component.Connector = exports.Connector = Connector;
	  Component.PaymentRequestApi = exports.PaymentRequestApi = PaymentRequestApi;
	  Component.PaymentContainer = exports.PaymentContainer = PaymentContainer;
	  Component.PaymentElement = exports.PaymentElement = PaymentElement;
	  Component.PaymentButton = exports.PaymentButton = PaymentButton;
	  Component.Response = exports.Response = Response;
	  module$1.exports = Component;
	})(checkout$1, checkout$1.exports);
	var checkoutExports = checkout$1.exports;
	var checkout = /*@__PURE__*/getDefaultExportFromCjs(checkoutExports);

	return checkout;

}));
